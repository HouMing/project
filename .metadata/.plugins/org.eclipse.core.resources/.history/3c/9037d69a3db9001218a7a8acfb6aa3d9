package name.hm.test;

import java.io.IOException;//{{{
import java.io.Reader;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.apache.log4j.Logger;
import org.springframework.util.Assert;

import name.hm.jpa.*;
//}}}

public class BaseTestCase implements ITestCase, ILogger
{
	public RoleMapper roleMapper = null;
	public GroupMapper groupMapper = null;
	public UserMapper userMapper = null;
	public ActionMapper actionMapper = null;
	
	static protected String CONF_FILE_NAME = "appContext-MyBATIS.xml";
	static protected String LOGGER_APPENDER = "dev";
	static protected Logger logger = Logger.getLogger(LOGGER_APPENDER); 
	static protected SqlSessionFactory sqlSessionFactory = null;
	static protected SqlSession se = null;

/*
	protected WorkflowMapper workflowMapper = null;
	protected DepartmentMapper departmentMapper = null;
	protected TitleMapper titleMapper = null;
	protected ClassroomMapper classroomMapper = null;
	protected TeacherMapper teacherMapper = null;
	protected StudentMapper studentMapper = null;
	protected StuaMapper stuaMapper = null;
	protected TcaMapper tcaMapper = null;
*/

	static {
		String resource = CONF_FILE_NAME;
		Reader reader;
		try {
			reader = Resources.getResourceAsReader(resource);
			if (sqlSessionFactory == null) {
				sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void openTestSession() throws Exception
	{
		se = sqlSessionFactory.openSession();
		Assert.notNull(se,"openTestSession failed!");
		Class c = BaseTestCase.class;
		Field[] fields = c.getFields();
		for(Field field : fields) {
			if(field.getClass()){
			field.set(this, se.getMapper(field.getClass()));
			}
		}
		
	}

	public void closeTestSession()
	{
		Class c = BaseTestCase.class;
		Method[] ms = c.getMethods();
		for (Method m : ms) {
			if(m.getName().matches("^set.*")) {
				try {
					m.invoke(this, (Object)null);
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
		if (se != null) {
			se.close();
			se = null;
		}
	}

	public RoleMapper getRoleMapper()
	{
		return roleMapper;
	}

	public void setRoleMapper(RoleMapper roleMapper)
	{
		this.roleMapper = roleMapper;
	}

	public GroupMapper getGroupMapper()
	{
		return groupMapper;
	}

	public void setGroupMapper(GroupMapper groupMapper)
	{
		this.groupMapper = groupMapper;
	}

	public UserMapper getUserMapper()
	{
		return userMapper;
	}

	public void setUserMapper(UserMapper userMapper)
	{
		this.userMapper = userMapper;
	}


	public ActionMapper getActionMapper()
	{
		return actionMapper;
	}

	public void setActionMapper(ActionMapper actionMapper)
	{
		this.actionMapper = actionMapper;
	}

}
